TCP (Transmission Control Protocol) &IP (Internet Protocol):
Is the basic communication language or protocol of the internet. It can be used as a 
communications protocol in a private network (either intranet or extranet)

Inrtanet:
private network that is contained within an enterprise

Extrnet:
private netork that used Internet technology and the public telecommunication system to 
securely share part of a bussiness's information or operations.

Is a 2 layer program..
	HigherLayer - Transmission Control Protocol manages the assembling of a message
	 or file into smaller packets that are rtansmitted over the internet and recieved by
	a TCP layer that resembles the packets into the origin message.

	LowerLayer - Internet Protocol handles the ADDRESS part of each packet so that it 
	gets to the right destination. Each gateway computer on the network checks this
	address to see where to forward the message.

TCP/IP uses the client/server model of communication which a computer user(a client)
	requests and is provided a service (such as sending a Web page) by another 
	computer (a server) in the network. TCP/IP are considered "stateless" as in they
	do not need constant connection like a telephone call. Being stateless frees the 
	network path so everyone can use them continuously.

User Datagram Protocol (UDP), which is used instead of TCP for special purposes.
Both UDP/IP run on top of the Internet Protocol. UDP just sends the packets which mean it 
has a lower bandwidth overhead latency

UDP privides 2 services not provided by the IP layer:
	1.  has port numbers to help distinguish different user requests
	2. has a checksum capability to verify that the data arrived intact.


In UNIX, everything is like a file
	1. All input is like reading a file
	2. All output is like writting a file
	3. File is represented by an integer file descriptor

IP is big endian (aka "network byte order")
	-Byte3, byte2, byte 1, byte 0
	-Use htons() and htonl() to convert to network byte order

System calls for sockets
	-Client: create, connect, write, read, close
	-Server: create, bind, linsten, accept, read, write, close

A typical Client Program:

    Prepare to communicate:
	+ Create a Socket
		1. Operation to create a socket
			a. int socket(int domain, int protocol)
			b. Returns a descriptor (or handle) for the socket
		2. Domain: protocol family
			- PF_INET for the internet
		3. Type
			+ SOCK_STREAM: reliable byte stream
			+ SOCK_DGRAM: message-orientated service
		4. Protocol: specific protocol
			+ UNSPEC: unspecified
			+ (PF_INET and SOCK_STREAM already implies TCP)
	+ Determine server address and port number
		1. Translating the servers name to an address
			-struct hostent *gethostbyname( char *name)
			-arguement is the name of the host
			-returns a struct that includes the host address
		2. Identify the port number
			+ struct servent *getservbyname(char *name, char *proto)
			+Arguements: service (eg. ftp) and protocol (eg. tcp)
	+ Initiate the connection to the server
		3. Establish the connection
			+ int connect(int sockfd, struct sockaddr *server_address, socketlen_t addrlen)
			+ Arguements: socket descriptor, server address, and address size
			+ Returns ) on success and -1 on error
    
    Exchange data with the server:
	+ Write data to the socket
		- ssize_t write(int sockfd, void *buf, size_t len)
		-Arguements: socket descriptor, pointer to buffer of data to send, and length of the buffer
		-Returns the number of charcters written, and -1 on error
	+Read data from the socket
		-ssize_t read(int sockfd, void *buf, size_t len)
		- Arguements: socket descriptor, pointer to buffer to place the data, size of the buffer
		-Returns the number of characters read (where 0 implioes "end of file"), and -1 on error
	+Do stuff with the data


A Typical Server Program:
    
    Prepare to communicate
	- Create a socket Associate local address and port with the socket
		+ int bind (int sockfd, struct sockaddr *my_addr, socklen_t addrlen)
		+ Arguements: socket descriptor, server address, address length
		+ returns ) on success, and -1 if error
    Passive open
	- Prepare to accept connections indicate how many clinets-in-waiting to permit
	- but dont establish one yet until hearing from a clien
	-accept an incoming connection from a client
		+int accept(int sockfd, struct sockaddr *addr, socketlen_t * addrlen)
		+ Arguements: socket descriptor, structure that will provide client address and port, and
		length of the struct
		+ Returns descriptor for a new socket for this connection

    Hearing from multiple clients
	-allow a backlog of waiting clients in case several try to start at once.
		+ int listen(int sockfd, int backlog)
		+Arguements: socket descriptor and acceptable backlog
		+ Returns 0 on success, and -1 on error
    Create a socket for each client
	- Upon accepting a new client cre4ate a new socket for communication
    Exchange Data with the client over new socket
	- Recieve data from the socket
	- Do stuff to handle the request (eg get a file from a query)
	- Send data to the socket
    Close the socket
	+int close(int sockfd)

    Repeat the next connection request


TIPS:
	1. What happens if no clients are around?
	Accept() call blocks waiting for a client

	Server can process just one request at a time
